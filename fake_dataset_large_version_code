{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Generating fake dataset"
      ],
      "metadata": {
        "id": "rcum-d-ZGMws"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "aaYnolyN2FKz"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "adjectives = [\n",
        "    \"Silent\", \"Forgotten\", \"Dark\", \"Enchanted\", \"Crimson\", \"Hidden\",\n",
        "    \"Golden\", \"Midnight\", \"Whispering\", \"Shattered\", \"Ancient\", \"Luminous\",\n",
        "    \"Cursed\", \"Fading\", \"Radiant\", \"Mysterious\", \"Wandering\", \"Frosted\",\n",
        "    \"Veiled\", \"Eternal\", \"Glimmering\", \"Fierce\", \"Vengeful\", \"Lost\",\n",
        "    \"Mighty\", \"Eclipsed\", \"Hallowed\", \"Twilight\", \"Ghostly\", \"Boundless\"\n",
        "]\n",
        "\n",
        "nouns = [\n",
        "    \"Forest\", \"Kingdom\", \"Path\", \"Crown\", \"Empire\", \"Shadow\", \"Realm\",\n",
        "    \"Flame\", \"Tower\", \"Sword\", \"Throne\", \"Dream\", \"City\", \"Tale\",\n",
        "    \"Waves\", \"Breeze\", \"Heart\", \"Moon\", \"Legacy\", \"Journey\", \"Cave\",\n",
        "    \"Wasteland\", \"Oracle\", \"Secret\", \"Chalice\", \"Fate\", \"Guardian\",\n",
        "    \"Book\", \"Hero\", \"Myth\", \"Artifact\", \"Sorcery\", \"Battle\"\n",
        "]\n",
        "\n",
        "concepts = [\n",
        "    \"of Eternity\", \"of the Phoenix\", \"of Shadows\", \"of the Fallen\",\n",
        "    \"of Time\", \"of Destiny\", \"of the Stars\", \"of the Sea\", \"of Dreams\",\n",
        "    \"of Fate\", \"of Secrets\", \"of the Unknown\", \"of Legends\", \"of Fire\",\n",
        "    \"of Ice\", \"of the Abyss\", \"of Whispers\", \"of Hope\", \"of Night\",\n",
        "    \"of the Dawn\", \"of the Wild\", \"of the Ancients\", \"of the Heart\",\n",
        "    \"of Echoes\", \"of Spirits\", \"of the Lost\", \"of the Void\", \"of the Brave\",\n",
        "    \"of the Cursed\", \"of the Forgotten\", \"of the Chosen\"\n",
        "]\n",
        "\n",
        "# Function to generate a random book title\n",
        "def generate_book_name():\n",
        "    return f\"The {random.choice(adjectives)} {random.choice(nouns)} {random.choice(concepts)}\"\n",
        "author_names = [\n",
        "    \"Alice Walker\", \"George Orwell\", \"F. Scott Fitzgerald\", \"J.K. Rowling\", \"Mark Twain\",\n",
        "    \"Ernest Hemingway\", \"Jane Austen\", \"Gabriel García Márquez\", \"Toni Morrison\", \"Stephen King\",\n",
        "    \"Agatha Christie\", \"J.R.R. Tolkien\", \"Harper Lee\", \"C.S. Lewis\", \"Charles Dickens\",\n",
        "    \"Virginia Woolf\", \"Leo Tolstoy\", \"Franz Kafka\", \"H.G. Wells\", \"Ray Bradbury\",\n",
        "    \"Isaac Asimov\", \"Margaret Atwood\", \"John Steinbeck\", \"Kurt Vonnegut\", \"J.D. Salinger\",\n",
        "    \"Emily Dickinson\", \"Oscar Wilde\", \"John Grisham\", \"Paulo Coelho\", \"Chuck Palahniuk\",\n",
        "    \"Neil Gaiman\", \"George R.R. Martin\", \"David Mitchell\", \"Dan Brown\", \"Herman Melville\",\n",
        "    \"Zadie Smith\", \"James Joyce\", \"Philip K. Dick\", \"Margaret Laurence\", \"Octavia Butler\",\n",
        "    \"Alice Munro\", \"Salman Rushdie\", \"Ian McEwan\", \"T.H. White\", \"Roald Dahl\",\n",
        "    \"Raymond Carver\", \"Nora Ephron\", \"Cormac McCarthy\", \"Maya Angelou\", \"David Foster Wallace\",\n",
        "    \"Khaled Hosseini\", \"Yaa Gyasi\", \"Jhumpa Lahiri\", \"Richard Wright\", \"Louise Erdrich\",\n",
        "    \"Ruth Ozeki\", \"Colson Whitehead\", \"Liane Moriarty\", \"Zora Neale Hurston\", \"Elizabeth Gilbert\",\n",
        "    \"Madeleine L'Engle\", \"Terry Pratchett\", \"E.L. James\", \"Marilynne Robinson\", \"Jonathan Franzen\",\n",
        "    \"Samantha Shannon\", \"Christopher Paolini\", \"Rainbow Rowell\", \"Ken Follett\", \"Daphne du Maurier\",\n",
        "    \"Nicholas Sparks\", \"David Baldacci\", \"Jodi Picoult\", \"Patricia Highsmith\", \"Thomas Hardy\",\n",
        "    \"Gillian Flynn\", \"Harlan Coben\", \"Stephen Hawking\", \"Tess Gerritsen\", \"Stephen Chbosky\",\n",
        "    \"John Green\", \"Mitch Albom\", \"Sue Monk Kidd\", \"Anne Rice\", \"Chimamanda Ngozi Adichie\",\n",
        "    \"Willa Cather\", \"Aldous Huxley\", \"John Updike\", \"Henry James\", \"Elif Shafak\",\n",
        "    \"Bram Stoker\", \"Evelyn Waugh\", \"T. S. Eliot\", \"Wallace Stegner\", \"Robert Louis Stevenson\",\n",
        "    \"Alice Sebold\", \"David Mitchell\", \"Irvine Welsh\", \"Philip Pullman\", \"Richard Adams\",\n",
        "    \"Truman Capote\", \"Jasper Fforde\", \"Harlan Ellison\", \"Marilynne Robinson\", \"Joyce Carol Oates\",\n",
        "    \"Gustave Flaubert\", \"Pat Conroy\", \"John Banville\", \"Lorrie Moore\", \"Kazuo Ishiguro\",\n",
        "    \"John Irving\", \"Barbara Kingsolver\", \"Anne Tyler\", \"Cormac McCarthy\", \"Mitch Albom\",\n",
        "    \"Kurt Vonnegut\", \"Chris Bohjalian\", \"Jonathan Safran Foer\", \"Rita Mae Brown\", \"Barbara Cartland\",\n",
        "    \"Danielle Steel\", \"Robert Cormier\", \"Bill Bryson\", \"Joyce Meyer\", \"Elena Ferrante\",\n",
        "    \"Mark Haddon\", \"Tom Robbins\", \"Michael Ondaatje\", \"David Almond\", \"Toni Cade Bambara\",\n",
        "    \"Sophie Kinsella\", \"J. D. Robb\", \"Peter Straub\", \"Michael Chabon\", \"Marjorie Kinnan Rawlings\",\n",
        "    \"Rafael Sabatini\", \"Robert M. Pirsig\", \"T. H. White\", \"W. Somerset Maugham\", \"Beverley Harper\",\n",
        "    \"Philip Roth\", \"James Baldwin\", \"John Fowles\", \"Neil Gaiman\", \"Robert A. Heinlein\",\n",
        "    \"Philip K. Dick\", \"C. J. Sansom\", \"Rosamund Lupton\", \"Carlos Ruiz Zafón\", \"David Eddings\",\n",
        "    \"Margaret Atwood\", \"Eugene O'Neill\", \"Susan Sontag\", \"Rudyard Kipling\", \"Edna O'Brien\",\n",
        "    \"Doris Lessing\", \"Anthony Burgess\", \"John Steinbeck\", \"Haruki Murakami\", \"Michael Ende\",\n",
        "    \"Colm Tóibín\", \"Chris Cleave\", \"Rebecca Skloot\", \"Barbara Kingsolver\", \"Gary Shteyngart\",\n",
        "    \"M. C. Escher\", \"Octavia Butler\", \"Richard Russo\", \"Marissa Meyer\", \"Colleen Hoover\",\n",
        "    \"Hannah Kent\", \"Brandon Sanderson\", \"Ruth Ware\", \"Katherine Paterson\", \"Alison Weir\",\n",
        "    \"Alex Michaelides\", \"Nicholas Sparks\", \"Laura Esquivel\", \"Samantha Shannon\", \"Erik Larson\",\n",
        "    \"David Sedaris\", \"Samantha Hunt\", \"James Dashner\", \"Jessica Knoll\", \"Marisha Pessl\"\n",
        "]\n",
        "#author_names = author_names[:10]\n",
        "countries = [\n",
        "    \"United States\", \"Canada\", \"United Kingdom\", \"Australia\", \"Germany\",\n",
        "    \"France\", \"Japan\", \"India\", \"Brazil\", \"South Africa\"\n",
        "]\n",
        "\n",
        "\n",
        "usernames = [\n",
        "    \"user123\", \"johnDoe\", \"janeSmith\", \"coolCat\", \"adventureSeeker\",\n",
        "    \"bookworm99\", \"travelBug\", \"gamerGuy\", \"artisticSoul\", \"musicLover\",\n",
        "    \"techGuru\", \"fashionista88\", \"foodie123\", \"natureExplorer\", \"historyBuff\",\n",
        "    \"movieFanatic\", \"fitnessFreak\", \"poetWarrior\", \"dreamerGirl\", \"scienceNerd\",\n",
        "    \"chillVibes\", \"creativeMind\", \"theRealMVP\", \"enthusiasticReader\", \"happyTraveler\",\n",
        "    \"coderDude\", \"designWhiz\", \"quirkyQuokka\", \"philosopherKing\", \"adrenalineJunkie\",\n",
        "    \"catLady88\", \"dogDad\", \"sportsFanatic\", \"bakingQueen\", \"gadgetGeek\",\n",
        "    \"gamerGirl\", \"mysterySolver\", \"ecoWarrior\", \"coffeeAddict\", \"doodleMaster\",\n",
        "    \"spicySalsa\", \"vintageVibes\", \"artfulDodger\", \"sunshineChaser\", \"zombieHunter\",\n",
        "    \"creativeGenius\", \"starGazer\", \"nerdAlert\", \"oceanLover\", \"cookingMaster\",\n",
        "    \"hikingHero\", \"charmingScribe\", \"futuristicThinker\", \"spaceCadet\", \"mindfulMaverick\",\n",
        "    \"comicConnoisseur\", \"writingWhiz\", \"sassyStar\", \"kindHeart\", \"wittyWonder\",\n",
        "    \"fashionFreak\", \"sereneSpirit\", \"happySoul\", \"puzzleMaster\", \"gameChanger\",\n",
        "    \"urbanExplorer\", \"floralFanatic\", \"rainbowDreamer\", \"natureLover\", \"artfulSoul\",\n",
        "    \"whimsicalWizard\", \"techieTurtle\", \"smartSquirrel\", \"curiousCat\", \"fabulousFeline\",\n",
        "    \"stylishSavant\", \"adventurousAlpaca\", \"retroGamer\", \"daringDreamer\", \"artsyAardvark\",\n",
        "    \"epicAdventurer\", \"daringDolphin\", \"calmBreeze\", \"thoughtfulTurtle\", \"wildSpirit\",\n",
        "    \"coolBreeze\", \"bubblyButterfly\", \"quirkyQuokka\", \"peppyPenguin\", \"sereneSeahorse\",\n",
        "    \"friendlyFox\", \"happyHedgehog\", \"wonderfulWhale\", \"playfulPanda\", \"sneakySnake\",\n",
        "    \"mischievousMonkey\", \"loyalLion\", \"courageousCheetah\", \"sassySwan\", \"gentleGiraffe\",\n",
        "    \"wiseOwl\", \"dreamyDove\", \"fearlessFalcon\", \"braveBear\", \"lovelyLynx\"\n",
        "]\n",
        "#user_names = usernames[:10]\n",
        "gender =[\n",
        "    'male',\n",
        "    'female'\n",
        "]\n",
        "occupations = [\n",
        "    \"Engineer\",\n",
        "    \"Teacher\",\n",
        "    \"Doctor\",\n",
        "    \"Nurse\",\n",
        "    \"Artist\",\n",
        "    \"Software Developer\",\n",
        "    \"Scientist\",\n",
        "    \"Writer\",\n",
        "    \"Marketing Specialist\",\n",
        "    \"Data Analyst\"\n",
        "]\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "shelf_locations = [\n",
        "    \"A1\", \"A2\", \"A3\", \"A4\", \"A5\",\n",
        "    \"B1\", \"B2\", \"B3\", \"B4\", \"B5\",\n",
        "    \"C1\", \"C2\", \"C3\", \"C4\", \"C5\",\n",
        "    \"D1\", \"D2\", \"D3\", \"D4\", \"D5\",\n",
        "    \"E1\", \"E2\", \"E3\", \"E4\", \"E5\",\n",
        "    \"F1\", \"F2\", \"F3\", \"F4\", \"F5\",\n",
        "    \"G1\", \"G2\", \"G3\", \"G4\", \"G5\",\n",
        "    \"H1\", \"H2\", \"H3\", \"H4\", \"H5\",\n",
        "    \"I1\", \"I2\", \"I3\", \"I4\", \"I5\",\n",
        "    \"J1\", \"J2\", \"J3\", \"J4\", \"J5\",\n",
        "    \"K1\", \"K2\", \"K3\", \"K4\", \"K5\"\n",
        "]\n",
        "\n",
        "\n",
        "genres = [\n",
        "    \"Fiction\", \"Non-Fiction\", \"Mystery\", \"Fantasy\", \"Science Fiction\",\n",
        "    \"Romance\", \"Thriller\", \"Historical Fiction\", \"Biography\", \"Self-Help\"\n",
        "]\n",
        "\n",
        "publisher_names = [\n",
        "    \"Penguin Random House\", \"HarperCollins\", \"Simon & Schuster\", \"Hachette Book Group\", \"Macmillan\",\n",
        "    \"Scholastic\", \"Wiley\", \"Pearson\", \"Houghton Mifflin Harcourt\", \"Cambridge University Press\",\n",
        "    \"Oxford University Press\", \"University of California Press\", \"University of Chicago Press\", \"Doubleday\",\n",
        "    \"Little, Brown and Company\", \"Knopf\", \"Scribner\", \"Alfred A. Knopf\", \"Crown Publishing Group\",\n",
        "    \"Orbit\", \"Tor Books\", \"St. Martin's Press\", \"Farrar, Straus and Giroux\", \"Workman Publishing\",\n",
        "    \"Sourcebooks\", \"Timber Press\", \"Ecco Press\", \"Carson-Dellosa Publishing\", \"Tyndale House Publishers\",\n",
        "    \"Harlequin\", \"Holiday House\", \"Zondervan\", \"Bluebird\", \"Avery\",\n",
        "    \"Thomson Reuters\", \"Springer\", \"Elsevier\", \"Academic Press\", \"MIT Press\",\n",
        "    \"John Wiley & Sons\", \"Berkley Books\", \"William Morrow\", \"Putnam\", \"Candlewick Press\",\n",
        "    \"Amulet Books\", \"Lerner Publishing Group\", \"Tachyon Publications\", \"Chronicle Books\", \"Shambhala Publications\",\n",
        "    \"Andrews McMeel Publishing\", \"Rowman & Littlefield\", \"Greenleaf Book Group Press\", \"Presses de la Cité\", \"Griffin\",\n",
        "    \"St. Martin's Griffin\", \"Skyhorse Publishing\", \"Workman Publishing Company\", \"Per Capita Publishing\", \"Sourcebooks Fire\",\n",
        "    \"Duke University Press\", \"New York University Press\", \"Princeton University Press\", \"Harvard University Press\", \"Yale University Press\",\n",
        "    \"Routledge\", \"Taylor & Francis\", \"Springer Nature\", \"SAGE Publications\", \"Rowman & Littlefield Publishers\",\n",
        "    \"Hachette Livre\", \"Editis\", \"Bonnier\", \"Grupo Planeta\", \"Knoff\",\n",
        "    \"Secker & Warburg\", \"Piatkus\", \"Oneworld Publications\", \"Profile Books\", \"Faber & Faber\",\n",
        "    \"Lulu Press\", \"Blurb\", \"IngramSpark\", \"CreateSpace\", \"BookBaby\",\n",
        "    \"Xlibris\", \"iUniverse\", \"Outskirts Press\", \"Balboa Press\", \"AuthorHouse\",\n",
        "    \"Archway Publishing\", \"WestBow Press\", \"Greenleaf Book Group\", \"Booktrope\", \"Touchstone\",\n",
        "    \"Merit Press\", \"Infinity Publishing\", \"Swoon Reads\", \"Cypress House\", \"Cedar Fort\",\n",
        "    \"Fiction Studio Books\", \"Bell Bridge Books\", \"Diversion Books\", \"Entangled Publishing\", \"Harlequin Teen\"\n",
        "]\n",
        "#publisher_names = publisher_names[:10]\n",
        "\n",
        "import openpyxl\n",
        "wb = openpyxl.Workbook()\n",
        "sheet = wb.active\n",
        "book_titles =[]\n",
        "for i in range(6000):\n",
        "  book_id = i + 1\n",
        "  book_title = generate_book_name()\n",
        "  shelf_location = random.choice(shelf_locations)\n",
        "  book_rating = (random.randint(1,100))/20\n",
        "  book_price = random.randint(1000,10000)\n",
        "  book_genre = random.choice(genres)\n",
        "  #book_publisher = random.choice(publisher_names)\n",
        "  book_publisher_id = random.randint(1,len(publisher_names))\n",
        "  book_author_id = random.randint(1,len(author_names))\n",
        "  book_author_name = random.choice(author_names)\n",
        "  book_author_country = random.choice(countries)\n",
        "  book_titles.append(book_title)\n",
        "  #print(book_id,book_title,shelf_location,book_rating,book_price,book_genre,book_publisher_id,book_author_id)\n",
        "  sheet.append([book_id,book_title,shelf_location,book_rating,book_price,book_genre,book_publisher_id,book_author_id])\n",
        "wb.save('books.xlsx')\n"
      ],
      "metadata": {
        "id": "6fkcJOf_OExM"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "wb = openpyxl.Workbook()\n",
        "sheet = wb.active\n",
        "for i in range(len(author_names)):\n",
        "  author_id = i + 1\n",
        "  author_name = author_names[i]\n",
        "  author_country = random.choice(countries)\n",
        "  #print(author_id,author_name,author_country)\n",
        "  sheet.append((author_id,author_name,author_country))\n",
        "wb.save('author.xlsx')"
      ],
      "metadata": {
        "id": "Yh2uHMR-SG1C"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "wb = openpyxl.Workbook()\n",
        "user_level = ['L1','L2','L3','L4','L5']\n",
        "sheet = wb.active\n",
        "for i in range(len(usernames)):\n",
        "  user_id = i + 1\n",
        "  username = usernames[i]\n",
        "  age = random.randint(18,90)\n",
        "  gender = random.choice(['male','female'])\n",
        "  occupation = random.choice(occupations)\n",
        "  user_lev = random.choice(user_level)\n",
        "  print((user_id,username,age,gender,occupation,user_lev))\n",
        "  sheet.append((user_id,username,age,gender,occupation,user_lev))\n",
        "wb.save('user.xlsx')"
      ],
      "metadata": {
        "id": "WANJrT1lTJEy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0db014c1-3574-447e-dd3e-73fe3b228a68"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 'user123', 29, 'female', 'Scientist', 'L1')\n",
            "(2, 'johnDoe', 34, 'male', 'Software Developer', 'L2')\n",
            "(3, 'janeSmith', 78, 'male', 'Scientist', 'L2')\n",
            "(4, 'coolCat', 80, 'female', 'Artist', 'L1')\n",
            "(5, 'adventureSeeker', 81, 'female', 'Scientist', 'L3')\n",
            "(6, 'bookworm99', 77, 'female', 'Artist', 'L1')\n",
            "(7, 'travelBug', 57, 'female', 'Nurse', 'L3')\n",
            "(8, 'gamerGuy', 66, 'male', 'Artist', 'L3')\n",
            "(9, 'artisticSoul', 82, 'male', 'Data Analyst', 'L2')\n",
            "(10, 'musicLover', 33, 'female', 'Software Developer', 'L4')\n",
            "(11, 'techGuru', 78, 'female', 'Marketing Specialist', 'L5')\n",
            "(12, 'fashionista88', 90, 'female', 'Doctor', 'L1')\n",
            "(13, 'foodie123', 79, 'male', 'Nurse', 'L4')\n",
            "(14, 'natureExplorer', 54, 'male', 'Scientist', 'L3')\n",
            "(15, 'historyBuff', 75, 'male', 'Nurse', 'L5')\n",
            "(16, 'movieFanatic', 24, 'female', 'Scientist', 'L1')\n",
            "(17, 'fitnessFreak', 73, 'female', 'Marketing Specialist', 'L3')\n",
            "(18, 'poetWarrior', 72, 'male', 'Engineer', 'L1')\n",
            "(19, 'dreamerGirl', 52, 'male', 'Teacher', 'L5')\n",
            "(20, 'scienceNerd', 88, 'female', 'Nurse', 'L5')\n",
            "(21, 'chillVibes', 21, 'male', 'Doctor', 'L5')\n",
            "(22, 'creativeMind', 36, 'male', 'Nurse', 'L5')\n",
            "(23, 'theRealMVP', 35, 'female', 'Engineer', 'L5')\n",
            "(24, 'enthusiasticReader', 88, 'male', 'Scientist', 'L5')\n",
            "(25, 'happyTraveler', 69, 'male', 'Teacher', 'L4')\n",
            "(26, 'coderDude', 88, 'female', 'Software Developer', 'L1')\n",
            "(27, 'designWhiz', 51, 'female', 'Writer', 'L1')\n",
            "(28, 'quirkyQuokka', 44, 'female', 'Marketing Specialist', 'L4')\n",
            "(29, 'philosopherKing', 57, 'female', 'Nurse', 'L3')\n",
            "(30, 'adrenalineJunkie', 66, 'male', 'Nurse', 'L4')\n",
            "(31, 'catLady88', 37, 'male', 'Artist', 'L4')\n",
            "(32, 'dogDad', 86, 'male', 'Teacher', 'L3')\n",
            "(33, 'sportsFanatic', 63, 'male', 'Engineer', 'L5')\n",
            "(34, 'bakingQueen', 62, 'male', 'Doctor', 'L3')\n",
            "(35, 'gadgetGeek', 46, 'female', 'Teacher', 'L4')\n",
            "(36, 'gamerGirl', 35, 'female', 'Engineer', 'L5')\n",
            "(37, 'mysterySolver', 61, 'female', 'Scientist', 'L4')\n",
            "(38, 'ecoWarrior', 67, 'male', 'Marketing Specialist', 'L1')\n",
            "(39, 'coffeeAddict', 18, 'male', 'Marketing Specialist', 'L5')\n",
            "(40, 'doodleMaster', 35, 'female', 'Doctor', 'L1')\n",
            "(41, 'spicySalsa', 59, 'female', 'Marketing Specialist', 'L4')\n",
            "(42, 'vintageVibes', 67, 'male', 'Engineer', 'L3')\n",
            "(43, 'artfulDodger', 39, 'female', 'Artist', 'L4')\n",
            "(44, 'sunshineChaser', 66, 'male', 'Engineer', 'L4')\n",
            "(45, 'zombieHunter', 30, 'male', 'Writer', 'L2')\n",
            "(46, 'creativeGenius', 30, 'female', 'Marketing Specialist', 'L5')\n",
            "(47, 'starGazer', 23, 'female', 'Scientist', 'L4')\n",
            "(48, 'nerdAlert', 20, 'female', 'Teacher', 'L2')\n",
            "(49, 'oceanLover', 81, 'female', 'Engineer', 'L5')\n",
            "(50, 'cookingMaster', 21, 'male', 'Doctor', 'L5')\n",
            "(51, 'hikingHero', 47, 'male', 'Data Analyst', 'L1')\n",
            "(52, 'charmingScribe', 31, 'male', 'Data Analyst', 'L4')\n",
            "(53, 'futuristicThinker', 76, 'male', 'Doctor', 'L2')\n",
            "(54, 'spaceCadet', 65, 'male', 'Scientist', 'L4')\n",
            "(55, 'mindfulMaverick', 83, 'female', 'Data Analyst', 'L5')\n",
            "(56, 'comicConnoisseur', 42, 'female', 'Artist', 'L1')\n",
            "(57, 'writingWhiz', 62, 'female', 'Data Analyst', 'L2')\n",
            "(58, 'sassyStar', 79, 'female', 'Data Analyst', 'L1')\n",
            "(59, 'kindHeart', 19, 'female', 'Software Developer', 'L1')\n",
            "(60, 'wittyWonder', 80, 'female', 'Marketing Specialist', 'L1')\n",
            "(61, 'fashionFreak', 30, 'male', 'Doctor', 'L2')\n",
            "(62, 'sereneSpirit', 79, 'male', 'Teacher', 'L5')\n",
            "(63, 'happySoul', 59, 'male', 'Teacher', 'L4')\n",
            "(64, 'puzzleMaster', 64, 'female', 'Teacher', 'L3')\n",
            "(65, 'gameChanger', 32, 'male', 'Nurse', 'L3')\n",
            "(66, 'urbanExplorer', 36, 'male', 'Marketing Specialist', 'L3')\n",
            "(67, 'floralFanatic', 27, 'male', 'Scientist', 'L4')\n",
            "(68, 'rainbowDreamer', 35, 'female', 'Software Developer', 'L3')\n",
            "(69, 'natureLover', 74, 'male', 'Doctor', 'L4')\n",
            "(70, 'artfulSoul', 88, 'male', 'Engineer', 'L5')\n",
            "(71, 'whimsicalWizard', 55, 'male', 'Engineer', 'L5')\n",
            "(72, 'techieTurtle', 63, 'male', 'Teacher', 'L5')\n",
            "(73, 'smartSquirrel', 70, 'female', 'Nurse', 'L2')\n",
            "(74, 'curiousCat', 49, 'male', 'Marketing Specialist', 'L4')\n",
            "(75, 'fabulousFeline', 76, 'male', 'Software Developer', 'L4')\n",
            "(76, 'stylishSavant', 65, 'male', 'Artist', 'L5')\n",
            "(77, 'adventurousAlpaca', 58, 'male', 'Engineer', 'L4')\n",
            "(78, 'retroGamer', 66, 'female', 'Engineer', 'L1')\n",
            "(79, 'daringDreamer', 33, 'male', 'Artist', 'L3')\n",
            "(80, 'artsyAardvark', 86, 'female', 'Doctor', 'L5')\n",
            "(81, 'epicAdventurer', 18, 'male', 'Teacher', 'L5')\n",
            "(82, 'daringDolphin', 69, 'female', 'Engineer', 'L4')\n",
            "(83, 'calmBreeze', 84, 'female', 'Teacher', 'L3')\n",
            "(84, 'thoughtfulTurtle', 33, 'male', 'Marketing Specialist', 'L5')\n",
            "(85, 'wildSpirit', 25, 'female', 'Data Analyst', 'L4')\n",
            "(86, 'coolBreeze', 37, 'female', 'Marketing Specialist', 'L3')\n",
            "(87, 'bubblyButterfly', 39, 'male', 'Engineer', 'L5')\n",
            "(88, 'quirkyQuokka', 19, 'female', 'Teacher', 'L1')\n",
            "(89, 'peppyPenguin', 41, 'male', 'Data Analyst', 'L4')\n",
            "(90, 'sereneSeahorse', 70, 'male', 'Writer', 'L4')\n",
            "(91, 'friendlyFox', 79, 'female', 'Doctor', 'L1')\n",
            "(92, 'happyHedgehog', 60, 'female', 'Data Analyst', 'L2')\n",
            "(93, 'wonderfulWhale', 34, 'male', 'Scientist', 'L1')\n",
            "(94, 'playfulPanda', 27, 'male', 'Data Analyst', 'L3')\n",
            "(95, 'sneakySnake', 88, 'female', 'Writer', 'L3')\n",
            "(96, 'mischievousMonkey', 32, 'female', 'Writer', 'L2')\n",
            "(97, 'loyalLion', 88, 'male', 'Engineer', 'L2')\n",
            "(98, 'courageousCheetah', 58, 'female', 'Doctor', 'L4')\n",
            "(99, 'sassySwan', 60, 'female', 'Data Analyst', 'L1')\n",
            "(100, 'gentleGiraffe', 63, 'female', 'Engineer', 'L5')\n",
            "(101, 'wiseOwl', 55, 'male', 'Software Developer', 'L2')\n",
            "(102, 'dreamyDove', 26, 'male', 'Scientist', 'L4')\n",
            "(103, 'fearlessFalcon', 26, 'male', 'Marketing Specialist', 'L1')\n",
            "(104, 'braveBear', 63, 'male', 'Marketing Specialist', 'L4')\n",
            "(105, 'lovelyLynx', 24, 'female', 'Engineer', 'L1')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime, timedelta\n",
        "import random\n",
        "\n",
        "def generate_sequential_dates(start_date, num_dates):\n",
        "    dates = []\n",
        "    current_date = start_date\n",
        "    ev = 0\n",
        "    for _ in range(num_dates):\n",
        "        dates.append(current_date.strftime(\"%Y-%m-%d\"))\n",
        "        if ev == 0 :\n",
        "           gap_days = random.randint(1, 10)  # Random gap of 1 to 10 days\n",
        "        else :\n",
        "           gap_days = random.randint(1, 4)  # Random gap of 1 to 10 days\n",
        "        # gap_days = random.randint(1, 10)  # Random gap of 1 to 10 days\n",
        "        ev = 1 - ev\n",
        "        current_date += timedelta(days=gap_days)\n",
        "\n",
        "    return dates\n",
        "\n",
        "# Example usage\n",
        "# start_date = datetime(2000, 1, 1)\n",
        "sequential_dates = generate_sequential_dates(datetime(2000, 1, 1), 10)\n",
        "print(sequential_dates)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VInEHNp3Tg62",
        "outputId": "27ff4e92-fdec-457d-f70b-362ceeb9b986"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['2000-01-01', '2000-01-02', '2000-01-05', '2000-01-14', '2000-01-17', '2000-01-18', '2000-01-22', '2000-02-01', '2000-02-03', '2000-02-11']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tid = 1;\n",
        "transcations = []\n",
        "for i in range(len(book_titles)):\n",
        "   number_of_transactions = random.randint(500,1000);\n",
        "   #number_of_transactions = 5\n",
        "   sequential_dates = generate_sequential_dates(datetime(1900, 1, 1), 2*number_of_transactions)\n",
        "   toss = random.randint(0,1);\n",
        "   #toss = 0\n",
        "   if toss == 0 :\n",
        "    sequential_dates[-1]=\"\"\n",
        "  #  print(sequential_dates)\n",
        "   for j in range(number_of_transactions):\n",
        "      book_id = i + 1\n",
        "      user_id = random.randint(1,len(usernames))\n",
        "      burrow_date = sequential_dates[2*j ]\n",
        "      return_date = sequential_dates[2*j +1]\n",
        "      #print((tid,user_id,book_id,burrow_date,return_date))\n",
        "      transcations.append((tid,user_id,book_id,burrow_date,return_date))\n",
        "      tid = tid + 1\n",
        "random.shuffle(transcations)\n",
        "wb = openpyxl.Workbook()\n",
        "sheet = wb.active\n",
        "for ele in transcations:\n",
        "  sheet.append(ele)\n",
        "wb.save('transcations.xlsx')\n",
        "print(len(transcations))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pX5PDEJJo2YS",
        "outputId": "936f1b1e-0500-48ae-b6be-1284de6073fa"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4509745\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wb = openpyxl.Workbook()\n",
        "sheet = wb.active\n",
        "print(len(publisher_names))\n",
        "for i in range(len(publisher_names)):\n",
        "  publisher_id = i + 1\n",
        "  publisher_name = publisher_names[i]\n",
        "  publisher_year_experience = random.randint(10,60)\n",
        "  publisher_rating = (random.randint(1,100))/20\n",
        "  publisher_books_published = random.randint(5,20)\n",
        "  print((publisher_id,publisher_name,publisher_year_experience,publisher_rating,publisher_books_published))\n",
        "  sheet.append((publisher_id,publisher_name,publisher_year_experience,publisher_rating,publisher_books_published))\n",
        "wb.save('publisher.xlsx')"
      ],
      "metadata": {
        "id": "AybltWUcnz2e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5fb08446-3f2e-4352-f344-20bb5a2cb13e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "104\n",
            "(1, 'Penguin Random House', 44, 3.1, 19)\n",
            "(2, 'HarperCollins', 59, 2.45, 15)\n",
            "(3, 'Simon & Schuster', 44, 4.3, 7)\n",
            "(4, 'Hachette Book Group', 54, 3.85, 9)\n",
            "(5, 'Macmillan', 30, 2.7, 15)\n",
            "(6, 'Scholastic', 25, 3.5, 8)\n",
            "(7, 'Wiley', 25, 1.55, 10)\n",
            "(8, 'Pearson', 30, 4.9, 17)\n",
            "(9, 'Houghton Mifflin Harcourt', 43, 3.0, 12)\n",
            "(10, 'Cambridge University Press', 47, 4.25, 19)\n",
            "(11, 'Oxford University Press', 57, 2.5, 14)\n",
            "(12, 'University of California Press', 14, 1.65, 13)\n",
            "(13, 'University of Chicago Press', 10, 2.2, 16)\n",
            "(14, 'Doubleday', 42, 2.8, 17)\n",
            "(15, 'Little, Brown and Company', 22, 2.05, 6)\n",
            "(16, 'Knopf', 32, 1.1, 5)\n",
            "(17, 'Scribner', 18, 4.7, 5)\n",
            "(18, 'Alfred A. Knopf', 52, 0.1, 14)\n",
            "(19, 'Crown Publishing Group', 37, 3.75, 20)\n",
            "(20, 'Orbit', 11, 4.65, 10)\n",
            "(21, 'Tor Books', 16, 4.4, 20)\n",
            "(22, \"St. Martin's Press\", 28, 4.35, 8)\n",
            "(23, 'Farrar, Straus and Giroux', 38, 1.75, 7)\n",
            "(24, 'Workman Publishing', 16, 2.2, 5)\n",
            "(25, 'Sourcebooks', 52, 4.7, 19)\n",
            "(26, 'Timber Press', 16, 4.9, 8)\n",
            "(27, 'Ecco Press', 48, 3.5, 14)\n",
            "(28, 'Carson-Dellosa Publishing', 21, 3.8, 6)\n",
            "(29, 'Tyndale House Publishers', 57, 2.6, 19)\n",
            "(30, 'Harlequin', 20, 0.35, 9)\n",
            "(31, 'Holiday House', 38, 4.8, 15)\n",
            "(32, 'Zondervan', 29, 2.65, 5)\n",
            "(33, 'Bluebird', 20, 4.85, 8)\n",
            "(34, 'Avery', 49, 0.25, 19)\n",
            "(35, 'Thomson Reuters', 37, 0.7, 6)\n",
            "(36, 'Springer', 23, 3.7, 9)\n",
            "(37, 'Elsevier', 59, 2.7, 8)\n",
            "(38, 'Academic Press', 12, 3.4, 14)\n",
            "(39, 'MIT Press', 36, 1.25, 18)\n",
            "(40, 'John Wiley & Sons', 34, 0.5, 17)\n",
            "(41, 'Berkley Books', 28, 2.15, 13)\n",
            "(42, 'William Morrow', 31, 2.95, 20)\n",
            "(43, 'Putnam', 28, 0.55, 15)\n",
            "(44, 'Candlewick Press', 39, 1.7, 14)\n",
            "(45, 'Amulet Books', 14, 2.7, 7)\n",
            "(46, 'Lerner Publishing Group', 34, 2.7, 18)\n",
            "(47, 'Tachyon Publications', 57, 2.65, 13)\n",
            "(48, 'Chronicle Books', 53, 2.9, 12)\n",
            "(49, 'Shambhala Publications', 53, 1.6, 15)\n",
            "(50, 'Andrews McMeel Publishing', 21, 4.9, 11)\n",
            "(51, 'Rowman & Littlefield', 54, 3.15, 20)\n",
            "(52, 'Greenleaf Book Group Press', 56, 2.0, 7)\n",
            "(53, 'Presses de la Cité', 20, 4.7, 12)\n",
            "(54, 'Griffin', 13, 0.4, 19)\n",
            "(55, \"St. Martin's Griffin\", 50, 4.25, 7)\n",
            "(56, 'Skyhorse Publishing', 54, 4.55, 17)\n",
            "(57, 'Workman Publishing Company', 60, 0.05, 7)\n",
            "(58, 'Per Capita Publishing', 35, 0.35, 19)\n",
            "(59, 'Sourcebooks Fire', 14, 3.5, 20)\n",
            "(60, 'Duke University Press', 17, 3.85, 5)\n",
            "(61, 'New York University Press', 31, 3.85, 10)\n",
            "(62, 'Princeton University Press', 24, 1.7, 9)\n",
            "(63, 'Harvard University Press', 58, 1.35, 8)\n",
            "(64, 'Yale University Press', 27, 0.5, 14)\n",
            "(65, 'Routledge', 50, 0.15, 6)\n",
            "(66, 'Taylor & Francis', 58, 4.5, 12)\n",
            "(67, 'Springer Nature', 44, 5.0, 7)\n",
            "(68, 'SAGE Publications', 53, 4.35, 18)\n",
            "(69, 'Rowman & Littlefield Publishers', 19, 1.4, 20)\n",
            "(70, 'Hachette Livre', 42, 4.4, 18)\n",
            "(71, 'Editis', 33, 3.4, 15)\n",
            "(72, 'Bonnier', 28, 4.45, 5)\n",
            "(73, 'Grupo Planeta', 10, 3.4, 11)\n",
            "(74, 'Knoff', 57, 4.2, 20)\n",
            "(75, 'Secker & Warburg', 51, 0.5, 7)\n",
            "(76, 'Piatkus', 36, 2.5, 8)\n",
            "(77, 'Oneworld Publications', 19, 4.6, 10)\n",
            "(78, 'Profile Books', 27, 4.95, 13)\n",
            "(79, 'Faber & Faber', 24, 0.25, 13)\n",
            "(80, 'Lulu Press', 55, 1.6, 18)\n",
            "(81, 'Blurb', 60, 3.5, 15)\n",
            "(82, 'IngramSpark', 21, 1.85, 6)\n",
            "(83, 'CreateSpace', 19, 4.05, 9)\n",
            "(84, 'BookBaby', 16, 2.55, 11)\n",
            "(85, 'Xlibris', 28, 1.8, 9)\n",
            "(86, 'iUniverse', 10, 2.7, 7)\n",
            "(87, 'Outskirts Press', 39, 2.35, 8)\n",
            "(88, 'Balboa Press', 51, 0.65, 9)\n",
            "(89, 'AuthorHouse', 35, 1.1, 20)\n",
            "(90, 'Archway Publishing', 12, 4.5, 7)\n",
            "(91, 'WestBow Press', 29, 1.55, 9)\n",
            "(92, 'Greenleaf Book Group', 29, 4.6, 16)\n",
            "(93, 'Booktrope', 15, 3.05, 20)\n",
            "(94, 'Touchstone', 49, 0.6, 12)\n",
            "(95, 'Merit Press', 53, 0.65, 15)\n",
            "(96, 'Infinity Publishing', 50, 2.0, 10)\n",
            "(97, 'Swoon Reads', 52, 3.85, 9)\n",
            "(98, 'Cypress House', 60, 4.7, 12)\n",
            "(99, 'Cedar Fort', 46, 0.85, 14)\n",
            "(100, 'Fiction Studio Books', 44, 3.5, 11)\n",
            "(101, 'Bell Bridge Books', 46, 4.1, 6)\n",
            "(102, 'Diversion Books', 33, 4.25, 17)\n",
            "(103, 'Entangled Publishing', 39, 4.55, 19)\n",
            "(104, 'Harlequin Teen', 13, 4.55, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "O7Dn13zNelGr"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}